{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# scikit-qulacs チュートリアル\n",
    "\n",
    "## scikit-qulacs とは \n",
    "\n",
    "量子回路シミュレータ [Qulacs-Osaka](https://github.com/Qulacs-Osaka/qulacs-osaka) ([Qulacs](https://github.com/qulacs/qulacs) の大阪大学バージョン) をバックエンドとした量子機械学習アルゴリズムのシミュレータです。scikit-learn の名前をもじっています。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## インストール\n",
    "PyPI からインストールできます。\n",
    "```\n",
    "pip install skqulacs\n",
    "```\n",
    "※Python 3.8以降を使用してください。Python 3.7系の場合、PyPIインストールで旧版0.2.0がインストールされます。最新コードで実装されているチュートリアルがエラーになる場合があります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quantum neural network\n",
    "入力データ ${\\boldsymbol x}$ に対して、学習パラメータ ${\\boldsymbol \\theta}$ を使って\n",
    "$$y_{{\\boldsymbol \\theta}}({\\boldsymbol x}) = \\langle 0|U^\\dagger({\\boldsymbol \\theta}, {\\boldsymbol x}) O U({\\boldsymbol \\theta}, {\\boldsymbol x})|0\\rangle$$\n",
    "の形でモデル $y_{{\\boldsymbol \\theta}}({\\boldsymbol x})$ を構築する手法を量子ニューラルネットワークと呼びます。scikit-qulacs では `skqulacs.qnn` モジュールに実装されています。分類問題をとく `skqulacs.qnn.classifier` と回帰問題を解く `skqulacs.qnn.regressor` の２つがあります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qnn.QNNClassifier` の使い方\n",
    "例として、有名な `iris` データセットを分類する量子ニューラルネットワークを組んでみます。まず、以下のコードによって `scikit-learn` から `iris` データセットを取り出し、訓練データとテストデータに分けます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "iris = datasets.load_iris()\n",
    "df = pd.DataFrame(iris.data, columns=iris.feature_names)\n",
    "x = df.loc[:, [\"petal length (cm)\", \"petal width (cm)\"]]\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    x, iris.target, test_size=0.25, random_state=0\n",
    ")\n",
    "x_train = x_train.to_numpy()\n",
    "x_test = x_test.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "変数はそれぞれ\n",
    "- `x_train`: 訓練データの入力\n",
    "- `y_train`: 訓練データのラベル\n",
    "- `x_test`: テストデータの入力\n",
    "- `y_test`: テストデータのラベル\n",
    "\n",
    "です。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "次に簡単な量子回路によってこれらの分類を行ってみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "trained parameters [ 3.3077862   2.20610834  0.18317852  2.57427866  2.1731261   5.16437333\n",
      "  6.90379975  4.92301026  3.78621276  5.01264629  5.39612169  5.06373429\n",
      "  2.36012806  4.08739844  5.47151574  2.70898056  3.1735183   2.66824882\n",
      "  0.2683309   4.5094121   6.64751394 -0.05754961  6.58882916  4.47236961\n",
      "  1.6969534   6.44925444  0.82493735  5.89706655  0.36732051  4.13386748\n",
      "  5.63948049  2.33409167  4.17240084  0.31197252  2.18623163  0.46591338\n",
      "  0.45247138  4.11809259  0.99494374  4.61047697  6.022204    3.2083882\n",
      "  1.44504131  2.8614801   5.06963927]\n",
      "loss 0.3253091864984035\n"
     ]
    }
   ],
   "source": [
    "from skqulacs.circuit.pre_defined import create_qcl_ansatz\n",
    "from skqulacs.qnn import QNNClassifier\n",
    "from skqulacs.qnn.solver import Bfgs\n",
    "\n",
    "nqubit = 5                      # qubitの数。必要とする入力、出力の次元数以上が必要である。\n",
    "c_depth = 3                     # circuitの深さ。ニューラルネットワークでの隠れ層に対応する。\n",
    "time_step = 1.                  # qcl_ansatz に必要となるパラメータ。横磁場イジングモデルによって発展させる時間を決める。\n",
    "num_class = 3                   # 分類数（ここでは3つの品種に分類）\n",
    "solver = Bfgs()                   # アルゴリズム。ほかには、`Adam()` や `NelderMead()` が使える。\n",
    "maxiter = 20                    # ループの最大。これが多いほど、正確になるが、時間がかかる。\n",
    "circuit = create_qcl_ansatz(nqubit, c_depth, time_step)     # LearningCircuitを作る\n",
    "qcl = QNNClassifier(circuit, num_class, solver)     # モデル構築を行う\n",
    "opt_loss, opt_params = qcl.fit(x_train, y_train, maxiter)                          # 学習\n",
    "print(\"trained parameters\", opt_params)\n",
    "print(\"loss\", opt_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "テストデータと比べて結果を出力します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9473684210526315\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "y_pred = qcl.predict(x_test)\n",
    "print(f1_score(y_test, y_pred, average=\"weighted\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "うまく分類できていることがわかります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qnn.QNNRegressor` の使い方\n",
    "回帰問題を解くには `QNNRegressor` を使います。ここでは $y=\\sin(\\pi x)$ を学習させてみます。まずデータセットを作ります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy.random import default_rng\n",
    "\n",
    "def generate_noisy_sine(x_min, x_max, num_x):\n",
    "    rng = default_rng(0)\n",
    "    x_train = [[rng.uniform(x_min, x_max)] for _ in range(num_x)]\n",
    "    y_train = [np.sin(np.pi*x[0]) for x in x_train]\n",
    "    mag_noise = 0.01\n",
    "    y_train += mag_noise * rng.random(num_x)\n",
    "    return np.array(x_train), np.array(y_train)\n",
    "  \n",
    "x_min = -1.0\n",
    "x_max = 1.0\n",
    "num_x = 80\n",
    "x_train, y_train = generate_noisy_sine(x_min, x_max, num_x)\n",
    "x_test, y_test = generate_noisy_sine(x_min, x_max, num_x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "作成したデータに対して学習を行います。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "trained parameters [ 4.25798056  1.92999783  0.31115392  0.49212499  4.80907853  6.06343962\n",
      "  4.00173116  4.9030698   3.43327385  5.81135678  5.07675043  0.49105851\n",
      "  5.42057489 -0.14168464  4.58566892  1.36858878  5.36424976  3.55819331\n",
      "  1.73062387  2.57575324  0.13021265  1.13880549  4.24069209  3.98487665\n",
      "  3.57694613  2.3916734   6.35641985  6.29467416  4.37029016  4.04927805\n",
      "  4.49274116  2.73557408  0.63853703  4.45377244  3.03068676  2.05579799\n",
      "  3.04866402  5.44965241  5.85460933  2.23874886  3.3939702   2.04538289\n",
      "  3.79038304  1.9171457   2.36846662  5.80016494  1.49691542  4.21257824\n",
      "  0.37117935  5.12489574  4.95969291  1.41616941  5.50035696  0.29056759\n",
      "  2.13739014  0.89954726  2.93673013  5.33719954  1.33472466  0.45390472\n",
      "  2.59255057  1.20163753  0.38793178  3.64633592  1.87676315  4.22226834\n",
      "  1.25359251  5.91947125  2.29405484  0.66284639  3.95280309  5.82548387]\n",
      "loss 0.001734007213230344\n"
     ]
    }
   ],
   "source": [
    "from skqulacs.qnn import QNNRegressor\n",
    "\n",
    "n_qubit = 4\n",
    "depth = 6\n",
    "time_step = 0.5\n",
    "solver = Bfgs()\n",
    "maxiter= 30\n",
    "circuit = create_qcl_ansatz(n_qubit, depth, time_step, 0)\n",
    "qnn = QNNRegressor(circuit, solver)\n",
    "opt_loss, opt_params = qnn.fit(x_train, y_train, maxiter)\n",
    "print(\"trained parameters\", opt_params)\n",
    "print(\"loss\", opt_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "訓練したモデルとテストデータを並べてプロットしてみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "y_pred = qnn.predict(x_test)\n",
    "plt.plot(x_test, y_test, \"o\", label=\"Test\")\n",
    "plt.plot(np.sort(np.array(x_test).flatten()), np.array(y_pred)[np.argsort(np.array(x_test).flatten())], label=\"Prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "よく学習できていることがわかります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qnn.generation` の使い方\n",
    "生成モデルを作ります。\n",
    "生成モデルとは、教師なし学習の一種で、入力データの分布を学習し、それに応じた新しいサンプルを生成するモデルです。\n",
    "\n",
    "ここでは、例として、ガウス関数の和のモデルを学習させてみます。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/watle/pros/scikit-qulacs/.venv/lib/python3.8/site-packages/scipy/optimize/linesearch.py:167: ComplexWarning: Casting complex values to real discards the imaginary part\n",
      "  stp, phi1, derphi1, task = minpack2.dcsrch(alpha1, phi1, derphi1,\n"
     ]
    }
   ],
   "source": [
    "from math import exp\n",
    "\n",
    "import numpy as np\n",
    "import pytest\n",
    "\n",
    "from skqulacs.circuit import create_farhi_neven_ansatz\n",
    "from skqulacs.qnn import QNNGeneretor\n",
    "from skqulacs.qnn.solver import Bfgs\n",
    "n_qubit = 5\n",
    "depth = 10\n",
    "circuit = create_farhi_neven_ansatz(n_qubit, depth)\n",
    "\n",
    "qnn = QNNGeneretor(circuit, Bfgs(), \"same\", 4.0, 5)\n",
    "\n",
    "#prob_listつまり、確率分布を生成する\n",
    "prob_list = np.zeros(32)\n",
    "ua = 32 * 2 / 7\n",
    "ub = 32 * 5 / 7\n",
    "v = 32 * 1 / 8\n",
    "prob_sum = 0\n",
    "for i in range(32):\n",
    "    prob_list[i] = exp(-(ua - i) * (ua - i) / (2 * v * v)) + exp(\n",
    "        -(ub - i) * (ub - i) / (2 * v * v)\n",
    "    )\n",
    "    prob_sum += prob_list[i]\n",
    "\n",
    "for i in range(32):\n",
    "    prob_list[i] /= prob_sum\n",
    "\n",
    "#prob_list が、理想的な確率分布になる。\n",
    "\n",
    "#prob_listの確率分布をもとに、10000個のデータを作る\n",
    "datas = np.random.choice(a=range(32), size=10000, p=prob_list)\n",
    "\n",
    "\n",
    "maxiter = 120\n",
    "qnn.fit(datas, maxiter)\n",
    "\n",
    "data_param = qnn.predict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/watle/pros/scikit-qulacs/.venv/lib/python3.8/site-packages/matplotlib/cbook/__init__.py:1298: ComplexWarning: Casting complex values to real discards the imaginary part\n",
      "  return np.asarray(x, float)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fec5fd9fd60>]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(list(range(0,32)), data_param)\n",
    "plt.plot(list(range(0,32)), prob_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "オレンジが学習すべきものの頻度の折れ線グラフ、\n",
    "青が学習した頻度の折れ線グラフです。\n",
    "\n",
    "うまく学習できています。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 量子カーネル法\n",
    "入力データ ${\\boldsymbol x}$ を量子状態 $|\\psi({\\boldsymbol x})\\rangle$ にマップし、この量子状態間の内積で定義されるカーネル関数\n",
    "$$K({\\boldsymbol x},{\\boldsymbol x}')=|\\langle \\psi({\\boldsymbol x})| \\psi({\\boldsymbol x}')\\rangle|^2$$\n",
    "を使ったカーネル法を量子カーネル法と呼びます。scikit-qulacs には、support vector classifier `skqulacs.qsvm.QSVC` と support vector regressor `skqulacs.qsvm.QSVR` の2つが実装されています。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qsvm.QSVC` の使い方\n",
    "ここでは IBM のグループが論文 [Supervised learning with quantum-enhanced feature spaces](https://www.nature.com/articles/s41586-019-0980-2) で提案した $|\\psi({\\boldsymbol x})\\rangle$ を使った分類を行います。この状態を作る量子回路は `skqulacs.circuit.create_ibm_embedding_circuit` によって作り出せます。\n",
    "\n",
    "まずデータセットを準備します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = datasets.load_iris()\n",
    "df = pd.DataFrame(iris.data, columns=iris.feature_names)\n",
    "x = df.loc[:, [\"petal length (cm)\", \"petal width (cm)\"]]\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    x, iris.target, test_size=0.25, random_state=0\n",
    ")\n",
    "x_train = x_train.to_numpy()\n",
    "x_test = x_test.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "回路を作成し、QSVC を訓練、予測値を出力させます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skqulacs.circuit import create_ibm_embedding_circuit\n",
    "from skqulacs.qsvm import QSVC\n",
    "n_qubit = 4                         # x_train の次元数以上必要。あまり小さいと結果が悪くなる。\n",
    "circuit = create_ibm_embedding_circuit(n_qubit)\n",
    "qsvm = QSVC(circuit)\n",
    "qsvm.fit(x_train, y_train)\n",
    "y_pred = qsvm.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "評価してみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8978070175438595\n"
     ]
    }
   ],
   "source": [
    "print(f1_score(y_test, y_pred, average=\"weighted\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "qnn よりも悪い結果となりました。回路形がこのデータセットに適していないからだと考えられます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qsvm.QSVR` の使い方\n",
    "同様の回路を使い、回帰を行ってみます。QNN の場合と同様に、$\\sin(\\pi x)$ を学習します。まずデータセットを作ります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_min = -1.0\n",
    "x_max = 1.0\n",
    "num_x = 1000\n",
    "x_train, y_train = generate_noisy_sine(x_min, x_max, num_x)\n",
    "x_test, y_test = generate_noisy_sine(x_min, x_max, num_x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "学習します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skqulacs.qsvm import QSVR\n",
    "n_qubit = 4                         # x_train の次元数以上必要。あまり小さいと結果が悪くなる。\n",
    "circuit = create_ibm_embedding_circuit(n_qubit)\n",
    "qsvm = QSVR(circuit)\n",
    "qsvm.fit(x_train, y_train)\n",
    "y_pred = qsvm.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "学習結果をプロットしてみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x_test, y_test, \"o\", label=\"Test\")\n",
    "plt.plot(np.sort(np.array(x_test).flatten()), np.array(y_pred)[np.argsort(np.array(x_test).flatten())], label=\"Prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "うまく学習できています。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 用意されている量子回路\n",
    "\n",
    "scikit-qulacs では代表的な論文で発表されている機械学習用量子回路を手軽に使えるようにするため、量子回路の実装に努めています。機械学習用量子回路は `LearningCircuit` クラスのインスタンスとして実装されていて、`skqulacs.circuit` モジュールにある `create_...()` という関数を呼ぶことにより作成可能です。\n",
    "\n",
    "代表的なansatzとして、\n",
    "- create_farhi_neven_ansatz(n_qubit: int, c_depth: int, seed: Optional[int] = None): [arXiv:1802.06002](https://arxiv.org/pdf/1802.06002)\n",
    "![farhi_neven_ansatz](figures/circuit_visualize/farhi_neven_ansatz.png)\n",
    "- create_ibm_embedding_circuit(n_qubit: int): [arXiv:1804.11326](https://arxiv.org/abs/1804.11326) \n",
    "![ibm_embedding_circuit](figures/circuit_visualize/ibm_embedding_circuit.png)\n",
    "\n",
    "が用意されています。\n",
    "\n",
    "他に利用可能な量子回路のリストについては[このページ](circuit_visualize.ipynb)をご覧ください。\n",
    "\n",
    "基本的には `QNNClassifier` などの引数として与えることを推奨しますが、自前で新たなアルゴリズムを作りたいときなど、これらの量子回路を直接扱いたいときもあると思います。以下に使用例を掲載します。\n",
    "\n",
    "以下のコードで QCL ansatz を作成します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_qubits = 4\n",
    "c_depth = 4\n",
    "time_step = 1.\n",
    "ansatz = create_qcl_ansatz(n_qubits, c_depth, time_step)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`LearningCircuit` にセットされている訓練パラメータは `get_parameters()` によって取り出せます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48 [2.9646519753472966, 2.4054163630603496, 5.8984153363073375, 2.512801032804015, 5.964913519260788, 3.8936080016830195, 5.923572589632018, 4.9481732525951205, 1.568563629432675, 5.554018967676112, 0.028389796241806445, 2.897527605841249, 5.267355240624224, 3.735313799160573, 2.2661746616128897, 3.5452804132198086, 0.43246053635497056, 2.5730108963703193, 1.974663878510053, 1.9654655970918322, 3.967587987184092, 0.8120259125764905, 6.047592885353966, 0.5745413307337336, 0.9710274726615847, 0.4695106940105736, 2.341674095381348, 0.802699963876766, 0.8310916316734924, 5.012384620423008, 0.018233484756863608, 4.2472370241118345, 5.1721310224316355, 5.021016841850289, 3.1032612340282735, 6.090572550277523, 4.484895234385721, 2.0890853870812838, 1.8127693347262788, 3.7158089135425, 3.7028938225792483, 3.3726572966673407, 2.699611657167366, 1.6621937249934382, 1.1061035348895243, 1.5957931515488104, 0.26282289161037825, 2.4484720212561286]\n"
     ]
    }
   ],
   "source": [
    "parameters = ansatz.get_parameters()\n",
    "print(len(parameters), parameters)      # show parameters in the circuit. Parameters are chosen randomly within create_qcl_ansatz()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`update_parameters()` を使うと、パラメータを更新できます。以下では全てのパラメータをゼロにセットします。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "ansatz.update_parameters(np.zeros(len(parameters)))\n",
    "print(ansatz.get_parameters())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`run(x)` を使うと、入力データ ${\\boldsymbol x}$ に対して、初期状態 $|0\\rangle$ に量子回路を作用させたときの出力状態が `qulacs.QuantumState` として返されます。QCL ansatz は `n_qubits` 次元までの入力を扱うことのできる ansatz なので、今回は 2 次元入力を与えます。\n",
    "\n",
    "多くの回路では、データ次元数をaとして、それが`n_qubits`以下の場合、回路のx番目には、n_qubits % a 番目の入力が入ります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.30869612+0.13283004j -0.0759879 -0.06176279j -0.21316566-0.1438611j\n",
      "  0.21877642+0.06614673j -0.33638863+0.12504632j  0.24610584+0.23178805j\n",
      "  0.05948781+0.05711437j  0.03556247-0.08914448j  0.03556247-0.08914448j\n",
      "  0.05948781+0.05711437j  0.24610584+0.23178805j -0.33638863+0.12504632j\n",
      "  0.21877642+0.06614673j -0.21316566-0.1438611j  -0.0759879 -0.06176279j\n",
      "  0.30869612+0.13283004j]\n"
     ]
    }
   ],
   "source": [
    "state = ansatz.run([np.pi/2, np.pi/2])\n",
    "print(state.get_vector())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ユーザー定義の量子回路を学習に利用する\n",
    "ここでは自分でオリジナルの量子回路を定義し、それを学習に利用する方法を説明します。scikit-qulacs では、`LearningCircuit` クラスによって量子回路を表現しています。これは qulacs の `ParametricQuantumCircuit` のラッパーとなっていて、入力データと訓練される回路パラメータを一元管理し、それらをすべて qulacs の parametric gate で扱えるようにしたものです。\n",
    "\n",
    "`LearningCircuit` クラスは qulacs の `ParametricQuantumCircuit` のうちの主要な `add_.._gate()` 系のメソッドを機能そのままにラップしています。それに加えて、`ParametricQuantumCircuit` を拡張する機能として、以下のメソッドが追加されています。\n",
    "\n",
    "- `add_input_RX_gate(index, input_func)`, `add_input_RY_gate(index, input_func)`, `add_input_RZ_gate(index, input_func)`: 入力データを入れるためのゲートを追加します。引数にはそれぞれ以下のものを与えます。\n",
    "    - `index`: そのゲートを作用させる量子ビット\n",
    "    - `input_func`: 入力データ ${\\boldsymbol x}$ -> 回転ゲートの回転角 $\\phi = \\phi({\\boldsymbol x})$ の変換を行う関数。回路実行時には `input_func(x)` が角度にセットされます。\n",
    "- `add_parametric_input_RX_gate(index, parameter, input_func)` (RY, RZ も同様) :入力データと訓練パラメータが同時に含まれているようなゲートを追加します。\n",
    "    - `index`: そのゲートを作用させる量子ビット\n",
    "    - `parameter`: 実数の訓練パラメータ $\\theta$\n",
    "    - `input_func`: 入力データ ${\\boldsymbol x}$, 訓練パラメータ $\\theta$ -> 回転ゲートの回転角 $\\phi = \\phi(\\theta, {\\boldsymbol x})$ の変換を行う関数。回路実行時には `input_func(theta, x)` が角度にセットされます。\n",
    "\n",
    "例えば以下のコードは、各量子ビットに ${\\boldsymbol x} = \\{x_i\\}_{i=0}^3$ の各成分を $R_y$ ゲートで入力したあと、各量子ビットを訓練可能な $R_y$ ゲートで変換し、最後に全ての量子ビットにアダマールゲートを一度だけ作用させる `LearningCircuit` を構成するコードです。(例のためだけに書いていて、特に意味は無い回路です。) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skqulacs.circuit import LearningCircuit\n",
    "n_qubit = 4\n",
    "circuit = LearningCircuit(n_qubit)\n",
    "for i in range(n_qubit):\n",
    "    circuit.add_input_RY_gate(i, lambda x: x[i%2])  # input 2 dimensional x into the circuit by RY rotation\n",
    "for i in range(n_qubit):\n",
    "    circuit.add_parametric_RY_gate(i, 0.)           # first argument is qubit index, second argument is parameter\n",
    "for i in range(n_qubit):\n",
    "    circuit.add_H_gate(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`run()` メソッドによって初期状態 $|0\\rangle$ にこの回路を作用させたときの量子状態が返されます。このメソッドは入力データ ${\\boldsymbol x}$ を引数として取ります。上の回路は 2 次元の ${\\boldsymbol x}$ を取れるように設計したので、2次元の入力を与えます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-6.93889390e-18+0.j -1.96261557e-17+0.j -2.08166817e-17+0.j\n",
      " -2.77555756e-17+0.j -2.08166817e-17+0.j  1.96261557e-17+0.j\n",
      " -6.93889390e-18+0.j  0.00000000e+00+0.j -2.08166817e-17+0.j\n",
      "  1.96261557e-17+0.j -6.93889390e-18+0.j  2.77555756e-17+0.j\n",
      " -6.93889390e-18+0.j  5.88784672e-17+0.j  9.02056208e-17+0.j\n",
      "  1.00000000e+00+0.j]\n"
     ]
    }
   ],
   "source": [
    "x = [np.pi/2,np.pi/2]\n",
    "state = circuit.run(x)\n",
    "print(state.get_vector())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "予想どおりの出力が得られることが確認できます。"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "764be42ca0958adfaecc7cdcd4b595f9575a15976e945c4fc02b7626abbb5098"
  },
  "kernelspec": {
   "display_name": "Python 3.8.10 ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
