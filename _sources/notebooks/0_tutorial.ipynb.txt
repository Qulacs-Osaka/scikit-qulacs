{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scikit-qulacs チュートリアル\n",
    "\n",
    "## scikit-qulacs とは \n",
    "\n",
    "量子回路シミュレータ [Qulacs-Osaka](https://github.com/Qulacs-Osaka/qulacs-osaka) ([Qulacs](https://github.com/qulacs/qulacs) の大阪大学バージョン) をバックエンドとしたバックエンドの量子機械学習アルゴリズムのシミュレータです。scikit-learn の名前をもじっています。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## インストール\n",
    "Pypi 経由でインストールできるように準備中です。現在はできないので、\n",
    "```\n",
    "git clone git@github.com:Qulacs-Osaka/scikit-qulacs.git\n",
    "cd scikit-qulacs\n",
    "pip install .\n",
    "```\n",
    "としてインストールします。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quantum neural network\n",
    "入力データ ${\\boldsymbol x}$ に対して、学習パラメータ ${\\boldsymbol \\theta}$ を使って\n",
    "$$y_{{\\boldsymbol \\theta}}({\\boldsymbol x}) = \\langle 0|U^\\dagger({\\boldsymbol \\theta}, {\\boldsymbol x}) O U({\\boldsymbol \\theta}, {\\boldsymbol x})|0\\rangle$$ \n",
    "の形でモデル $y_{{\\boldsymbol \\theta}}({\\boldsymbol x})$ を構築する手法を量子ニューラルネットワークと呼びます。scikit-qulacs では `skqulacs.qnn` モジュールに実装されています。分類問題をとく `skqulacs.qnn.classifier` と回帰問題を解く `skqulacs.qnn.regressor` の２つがあります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qnn.QNNClassifier` の使い方\n",
    "例として、有名な `iris` データセットを分類する量子ニューラルネットワークを組んでみます。まず、以下のコードによって `scikit-learn` から `iris` データセットを取り出し、訓練データとテストデータに分けます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "iris = datasets.load_iris()\n",
    "df = pd.DataFrame(iris.data, columns=iris.feature_names)\n",
    "x = df.loc[:, [\"petal length (cm)\", \"petal width (cm)\"]]\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    x, iris.target, test_size=0.25, random_state=0\n",
    ")\n",
    "x_train = x_train.to_numpy()\n",
    "x_test = x_test.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "変数はそれぞれ\n",
    "- `x_train`: 訓練データの入力\n",
    "- `y_train`: 訓練データのラベル\n",
    "- `x_test`: テストデータの入力\n",
    "- `y_test`: テストデータのラベル\n",
    "\n",
    "です。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "次に簡単な量子回路によってこれらの分類を行ってみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "trained parameters [ 5.68026165e+00  6.10209784e+00  4.50576651e+00  2.76464027e+00\n",
      "  5.84654943e+00  1.14944587e+00  1.16580821e+00  1.44672000e+00\n",
      "  5.17521414e+00  5.04376593e+00  2.51037598e+00  5.06083327e+00\n",
      "  1.96099326e+00  6.12387212e+00  1.64324028e+00 -1.47827549e-03\n",
      "  4.46601615e+00  6.34634341e+00  2.05038605e+00  5.78870060e+00\n",
      " -8.57019085e-02  6.40992348e+00  4.56187247e+00  3.19459255e+00\n",
      "  5.55824069e+00  3.56066575e+00  5.02245985e+00  3.05213912e+00\n",
      "  5.83613092e+00  3.88356288e+00 -7.80407945e-02  1.23000111e+00\n",
      "  6.21132428e+00  2.75570683e+00  3.74230043e+00  6.14600014e+00\n",
      "  2.53905351e-01  2.26196231e+00  4.15179041e+00  4.27127491e+00\n",
      "  4.04065901e+00  3.98796123e-01  2.10163159e+00  1.38851246e+00\n",
      "  5.02115183e+00]\n",
      "loss 0.10037905500811795\n"
     ]
    }
   ],
   "source": [
    "from skqulacs.circuit.pre_defined import create_qcl_ansatz\n",
    "from skqulacs.qnn import QNNClassifier\n",
    "\n",
    "nqubit = 5                      # qubitの数。必要とする入力、出力の次元数以上が必要である。\n",
    "c_depth = 3                     # circuitの深さ。ニューラルネットワークでの隠れ層に対応する。\n",
    "time_step = 1.                  # qcl_ansatz に必要となるパラメータ。横磁場イジングモデルによって発展させる時間を決める。\n",
    "num_class = 3                   # 分類数（ここでは3つの品種に分類）\n",
    "solver=\"BFGS\"                   # アルゴリズム。ほかには、\"Adam\" が使える。\n",
    "maxiter = 20                    # ループの最大。これが多いほど、正確になるが、時間がかかる。\n",
    "circuit = create_qcl_ansatz(nqubit, c_depth, time_step)     # LearningCircuitを作る\n",
    "qcl = QNNClassifier(nqubit, circuit, num_class, solver)     # モデル構築を行う\n",
    "opt_loss, opt_params = qcl.fit(x_train, y_train, maxiter)                          # 学習\n",
    "print(\"trained parameters\", opt_params)\n",
    "print(\"loss\", opt_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "テストデータと比べて結果を出力します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9739522830846216\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "y_pred = qcl.predict(x_test)\n",
    "print(f1_score(y_test, y_pred, average=\"weighted\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "うまく分類できていることがわかります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qnn.QNNRegressor` の使い方\n",
    "回帰問題を解くには `QNNRegressor` を使います。ここでは $y=\\sin(\\pi x)$ を学習させてみます。まずデータセットを作ります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy.random import default_rng\n",
    "\n",
    "def generate_noisy_sine(x_min, x_max, num_x):\n",
    "    rng = default_rng(0)\n",
    "    x_train = [[rng.uniform(x_min, x_max)] for _ in range(num_x)]\n",
    "    y_train = [np.sin(x[0]) for x in x_train]\n",
    "    mag_noise = 0.01\n",
    "    y_train += mag_noise * rng.random(num_x)\n",
    "    return x_train, y_train\n",
    "  \n",
    "x_min = -1.0\n",
    "x_max = 1.0\n",
    "num_x = 50\n",
    "x_train, y_train = generate_noisy_sine(x_min, x_max, num_x)\n",
    "x_test, y_test = generate_noisy_sine(x_min, x_max, num_x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "作成したデータに対して学習を行います。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "trained parameters [ 3.93166403  1.74113587  0.3630937  -0.44173687  5.15937421  4.64547617\n",
      "  3.76834652  3.74289434  3.25187658  5.70564301  5.11132962  0.07167768\n",
      "  5.10139818  0.36990044  4.30785906  1.0497284   5.61443714  2.71529377\n",
      "  1.46078489  2.7214845   0.50767906  1.03870172  4.29908696  3.83989125\n",
      "  4.1144703   2.46881313  6.29411763]\n",
      "loss 0.00036939215487285566\n"
     ]
    }
   ],
   "source": [
    "from skqulacs.qnn import QNNRegressor\n",
    "\n",
    "n_qubit = 3\n",
    "depth = 3\n",
    "time_step = 0.5\n",
    "solver=\"BFGS\"\n",
    "maxiter=30\n",
    "circuit = create_qcl_ansatz(n_qubit, depth, time_step, 0)\n",
    "qnn = QNNRegressor(n_qubit, circuit, solver)\n",
    "opt_loss, opt_params = qnn.fit(x_train, y_train, maxiter)\n",
    "print(\"trained parameters\", opt_params)\n",
    "print(\"loss\", opt_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "訓練したモデルとテストデータを並べてプロットしてみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "y_pred = qnn.predict(x_test)\n",
    "plt.plot(x_test, y_test, \"o\", label=\"Test\")\n",
    "plt.plot(np.sort(np.array(x_test).flatten()), np.array(y_pred)[np.argsort(np.array(x_test).flatten())], label=\"Prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "よく学習できていることがわかります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 量子カーネル法\n",
    "入力データ ${\\boldsymbol x}$ を量子状態 $|\\psi({\\boldsymbol x})\\rangle$ にマップし、この量子状態間の内積で定義されるカーネル関数\n",
    "$$K({\\boldsymbol x},{\\boldsymbol x}')=|\\langle \\psi({\\boldsymbol x})| \\psi({\\boldsymbol x}')\\rangle|^2$$\n",
    "を使ったカーネル法を量子カーネル法と呼びます。scikit-qulacs には、support vector classifier `skqulacs.qsvm.QSVC` と support vector regressor `skqulacs.qsvm.QSVR` の2つが実装されています。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qsvm.QSVC` の使い方\n",
    "ここでは IBM のグループが論文 [Supervised learning with quantum-enhanced feature spaces](https://www.nature.com/articles/s41586-019-0980-2) で提案した $|\\psi({\\boldsymbol x})\\rangle$ を使った分類を行います。この状態を作る量子回路は `skqulacs.circuit.create_defqsv` によって作り出せます。\n",
    "\n",
    "まずデータセットを準備します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = datasets.load_iris()\n",
    "df = pd.DataFrame(iris.data, columns=iris.feature_names)\n",
    "x = df.loc[:, [\"petal length (cm)\", \"petal width (cm)\"]]\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    x, iris.target, test_size=0.25, random_state=0\n",
    ")\n",
    "x_train = x_train.to_numpy()\n",
    "x_test = x_test.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "回路を作成し、QSVC を訓練、予測値を出力させます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skqulacs.circuit import create_defqsv\n",
    "from skqulacs.qsvm import QSVC\n",
    "n_qubit = 4                         # x_train の次元数以上必要。あまり小さいと結果が悪くなる。\n",
    "circuit = create_defqsv(n_qubit)\n",
    "qsvm = QSVC(circuit)\n",
    "qsvm.fit(x_train, y_train)\n",
    "y_pred = qsvm.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "評価してみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8978070175438595\n"
     ]
    }
   ],
   "source": [
    "print(f1_score(y_test, y_pred, average=\"weighted\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "qnn よりも悪い結果となりました。回路形がこのデータセットに適していないからだと考えられます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `skqulacs.qsvm.QSVR` の使い方\n",
    "同様の回路を使い、回帰を行ってみます。QNN の場合と同様に、$\\sin(\\pi x)$ を学習します。まずデータセットを作ります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_min = -1.0\n",
    "x_max = 1.0\n",
    "num_x = 1000\n",
    "x_train, y_train = generate_noisy_sine(x_min, x_max, num_x)\n",
    "x_test, y_test = generate_noisy_sine(x_min, x_max, num_x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "学習します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skqulacs.qsvm import QSVR\n",
    "n_qubit = 4                         # x_train の次元数以上必要。あまり小さいと結果が悪くなる。\n",
    "circuit = create_defqsv(n_qubit)\n",
    "qsvm = QSVR(circuit)\n",
    "qsvm.fit(x_train, y_train)\n",
    "y_pred = qsvm.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "学習結果をプロットしてみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD4CAYAAADhNOGaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAA0YElEQVR4nO3dd3hUVfrA8e+bSaH3IggIuKDgAhEiokixUGwUpSmssLbFXd11WVEUfyu4oiiuulbEjq6CogYUBZGyuFIETCSCS0clUiIQioG0eX9/3Ekckkmbuanzfp4nD3PPPefOm5swb+45954jqooxxpjwFVHeARhjjClflgiMMSbMWSIwxpgwZ4nAGGPCnCUCY4wJc5HlHUAwGjVqpK1bty7vMIwxplLZsGHDz6raOG95pUwErVu3Zv369eUdhjHGVCoi8n2gcusaMsaYMGeJwBhjwpwlAmOMCXOVcowgkMzMTPbs2cPJkyfLO5Qqo1q1arRo0YKoqKjyDsUYU4qqTCLYs2cPtWvXpnXr1ohIeYdT6akqBw8eZM+ePbRp06a8wzHGlKIqkwhOnjxpScBFIkLDhg1JSUkp71CMCXvxCcnMWLyFn1JP0LxedSYOOIsh557u2vGrTCIALAm4zM6nMeXr/vgk3lrzwyllyakn+Nt73wC4lgyqVCIwxpjKbvRLq/lyx6FC62R7lckfJlkiqGgOHjzIpZdeCsC+ffvweDw0buw8wPfVV18RHR1daPsVK1YQHR3NhRdeWOqxGmMqlviEZKYs2ETqicxit/klI9u19w/bROB2n1vDhg1JTEwEYMqUKdSqVYu77rqr2O1XrFhBrVq1LBEYE2YCdf+UtbB8jiA+IZl7P0giOfUEitPndu8HScQnJLv6Phs2bKBPnz5069aNAQMGsHfvXgCefvppOnbsSOfOnRk1ahS7d+9m5syZPPnkk8TGxvLFF1+4GocxpmKJT0im3X0LaT1pYdBJwM0RvLC8IpixeAsnMk+9rDqRmc2MxVtc63NTVe644w7mz59P48aNmTt3LpMnT+bVV19l+vTp7Nq1i5iYGFJTU6lXrx7jx48v8VWEMabycesKYHSPVi5E4wjLRPBT6okSlQcjPT2db7/9ln79+gGQnZ1Ns2bNAOjcuTOjR49myJAhDBkyxLX3NMZUTPEJydz3wUbSMr3EkEHfiE2cG7GDOvxCqtZio7ZltbcjJ4kp1vHG9GjFQ0M6uRZfWCaC5vWqkxzgQ795vequvYeqcs4557B69ep8+xYuXMjKlSv56KOPmDZtGklJSa69rzGm4ohPSGbCu4l4FWqRxt2RCxjrWUxNScerwnGqUUecz6KjWoO52X15PmsQh6kT8HhuJ4AcYZkIJg44i3s/SDqle6h6lIeJA85y7T1iYmJISUlh9erVXHDBBWRmZrJ161Y6dOjAjz/+yMUXX8xFF13EnDlzOH78OLVr1+bo0aOuvb8xpvzkvQW0m2zh2ehnaCaHmJ99IR9k92K1tyMZRBFDBudFbGG45z/c6PmUEZ4VTM68iY+9FwDQrklNlkzoW6rxhmUiyBkHKM0n9SIiIpg3bx5//vOfOXLkCFlZWdx55520b9+eMWPGcOTIEVSVP//5z9SrV4+rr76aYcOGMX/+fJ555hl69erlWizGmLIR6BmAyyPW8nTUsyRrIwZnPMg3+ptT9qcTzX+9nfivtxPPyhAejZrFs9HPMLTGDi7925vgKf2PaVHV0A8iMhD4F+ABXlbV6Xn2Pwlc7NusATRR1Xq+fdlATt/ID6o6qKj3i4uL07wL03z33Xd06NAhlG/DBGDn1Zii+XcB+bs6YhVPRj1Pgv6GmzImcpSahR6nXZOaLPlLT1j2EHz5FLQfCMNeg+garsQpIhtUNS5vecipRkQ8wHNAP2APsE5EFqjq5pw6qvpXv/p3AOf6HeKEqsaGGocxxpS1fk+sYNuBXwLuuyBiE09EvcAGbc/vM+4mjWoFHicyQnh8eJdfeyX6TYV6LWHhXTDnOrj+XYgs3kByMNy45ugObFfVnQAiMgcYDGwuoP51wAMuvK8xxpSbNpMWUlB/ShvZy8yoJ9mlp3Fzxl0FJoHTC+uWPu9miKwO8/8IH9zqXBlElM6jX24kgtOBH/229wDnB6ooImcAbYBlfsXVRGQ9kAVMV9X4AtreCtwK0KqVe/fPGmNMceXMSBDorsMc0WTyXNTTZOHhxsyJHCN/t07PMxvw71suKPoNzx0NaT/Dkr/DF7+FPhNDCb9AZT1YPAqYp6r+T3OdoarJItIWWCYiSaq6I29DVZ0FzAJnjKBswjXGmILHAAK5K/JdOkZ8z40Zd7FHm+TbX+wkkOPCP8P+TbB8GjSPhXb9it+2mNxIBMlAS7/tFr6yQEYBf/IvUNVk3787RWQFzvhBvkRgjDFlLT4hmTvnJha7fs+IJG6NXMjsrH4s83bNLa8Z7WHa0E7B3ZkoAlf/y0kGH46H276E2qeV/DiFcCMRrAPaiUgbnAQwCrg+byURORuoD6z2K6sPpKlquog0AnoCj7kQkzHGBC0+IZkJcxPxlqBNPY7xz6iZbPc25+Es5yMw2iM8NqxL6LemR1WHYa/Cwr9BVnpoxwog5JEHVc0CbgcWA98B76rqJhF5UET8bwUdBczRU+9X7QCsF5FvgOU4YwQFDTJXeB6Ph9jYWH77298yfPhw0tLSgj7WuHHjmDdvHgA333wzmzcXfFpWrFjBqlWrcrdnzpzJ7Nmzg35vY8LZ6JdWc2cJkwAo06NepgFH+Uvm7VSvUYunRsayddoV7j2f1PgsGPcx1D/DneP5cWWMQFU/AT7JU/b3PNtTArRbBbj/vHQ5qV69eu5U1KNHj2bmzJlMmDAhd39WVhaRkSU/5S+//HKh+/NOYT1+/PgSv4cx4S4+IZmJ7yWSWbIMAMAIzwoGetbxaNZ13DJiiKsPp5aFsJyGuiz06tWL7du3s2LFCnr16sWgQYPo2LEj2dnZTJw4kfPOO4/OnTvz4osvAs7cRLfffjtnnXUWl112GQcOHMg9Vt++fcl5gG7RokV07dqVLl26cOmllwacwnrKlCk8/vjjACQmJtKjRw86d+7M0KFDOXz4cO4x77nnHrp370779u1t6msTtvo9sYLWkxZy59zgkkCH6AM8XO0taNObex58vtIlAaiqU0x8Ogn2uTyR22md4PLpRdfD+cv/008/ZeDAgQB8/fXXfPvtt7Rp04ZZs2ZRt25d1q1bR3p6Oj179qR///4kJCSwZcsWNm/ezP79++nYsSM33njjKcdNSUnhlltuYeXKlbRp04ZDhw7RoEGDfFNYL126NLfNDTfcwDPPPEOfPn34+9//ztSpU3nqqady4/zqq6/45JNPmDp1Kp9//rkLJ8qYysGN6aB7t63NbB6HQzEwZGap3edf2qpmIignJ06cIDY2FnCuCG666SZWrVpF9+7dadOmDQCfffYZGzduzO3/P3LkCNu2bWPlypVcd911eDwemjdvziWXXJLv+GvWrKF37965x2rQoEGh8Rw5coTU1FT69OkDwNixYxk+fHju/muuuQaAbt26sXv37pC+d2MqCzcSQP0aUTxw9TkM2f8crPkaRsyGupXvSiBH1UwExfzL3W3+YwT+atb8dX4RVeWZZ55hwIABp9T55JNP8jYrdTExziPrHo+HrKysMn9/Y8ra+dOWsP9YRlBtPQL/HBH7a9fP/xbCmueg+x+g42AXoyx7lfM6phIbMGAAL7zwApmZziLVW7du5ZdffqF3797MnTuX7Oxs9u7dy/Lly/O17dGjBytXrmTXrl0AHDrkzHJYu3Ztjh07lq9+3bp1qV+/fm7//5tvvpl7dWBMOLk/PonWkxYGnQTaNanJjkeu/DUJHP4e4m+DZrHQ/x/uBVpOquYVQQV28803s3v3brp27Yqq0rhxY+Lj4xk6dCjLli2jY8eOtGrVigsuyP/kYePGjZk1axbXXHMNXq+XJk2asGTJknxTWPt74403GD9+PGlpabRt25bXXnutrL5VYyqEUK4CIMCTwFkZMO/3oArDXy/VyeDKiivTUJc1m4a67Nh5NZVVYTODFiXfbKA5VGH+7ZD4ljMuUMm6hEptGmpjjKkoQnkWIEeBK4KpwuLJThLoM6nSJYHCWCIwxlQJod4NJMCTI2MDPwfgzYZF98JXL8L546HvpOADrYCqVCJQVUSkvMOoMipjt6EJPyWdGC6vIieEO7YfFtwO2z6DC26H/g85E8FVIVUmEVSrVo2DBw/SsGFDSwYuUFUOHjxItWoFr6pkTHkL5SogUmD7I1cWXCErHRLfhqVTISMNrvyns1hMFVRlEkGLFi3Ys2cPKSkp5R1KlVGtWjVatGhR3mEYk0+o3UBjerTioSF5pjlThWN74cB3sOs/8M1cOL4PWp4Pg56Fxu1DjLriqjKJICoqKveJW2NM1RXK7aC5A8Hpx+D7VfBTIhzYBClbnK/0o07FiEhoezFcMBPa9q1yXUF5VZlEYIypuka/tJovdxwK6RjPXNueq3UFvPIw/PgV5Kw4XKMRNOkAnUdA47Odr9M6QfV6oYZdaVgiMMZUaKE8DwBQi5PM67yOs5feBiePQNNO0HsitIhzngyu3dS9YCspSwTGmArr/vikoJNAzWgPM3ul0+vbKbD1B+hwtbP+b8vu7gZZBVgiMMZUOKEMBnsE/jm8M0NSZ8PKGVC/Nfx+EZxRggXjw4wlAmNMhRGfkMxf5yYS7BMsY3q04qErzoQPboH/fQyxo+HyxyCmlqtxVjWWCIwxFUIoVwG5E8OlH4N/D3PuCBrwCPS4rcrf8eMGSwTGmHIX7F1BUREwY7hvWogTqU4SSP4arn0ZOg1zP9AqypX1CERkoIhsEZHtIpJvEg4RGSciKSKS6Pu62W/fWBHZ5vsa60Y8xpjKIWedgJImgZjICJ4aGcu2h31rBKQdgtmDnOcCRrxhSaCEQr4iEBEP8BzQD9gDrBORBaq6OU/Vuap6e562DYAHgDicm3o3+NoeDjUuY0zF5Uo3UI7jKTB7MBzcDqPehvb9XYoyfLhxRdAd2K6qO1U1A5gDFHd+1gHAElU95PvwXwIMdCEmY0wFNfql1e4lgWP74fUr4dBOGP2uJYEguTFGcDrwo9/2HuD8APWuFZHewFbgr6r6YwFtA04BKCK3ArcCtGrVyoWwjTFl7f74pKDGAgKuEXB0L7xxNRz9CcbMg9YXuRNkGCqrNYs/Alqramecv/rfKOkBVHWWqsapalzjxo1dD9AYU3riE5KJnfpZUFcCY3q0yp8EUn+A169wJokb874lgRC5cUWQDLT0227hK8ulqgf9Nl8GHvNr2zdP2xUuxGSMqQDiE5K594ONnAhiybAIgSdGBFgoZs8GeGeUM0307z60J4Vd4EYiWAe0E5E2OB/so4Dr/SuISDNV3evbHAR853u9GHhYROr7tvsD97oQkzGmnIUyR9BTBa0UtnkBfHAr1GoC4z6GxmeFGKUBFxKBqmaJyO04H+oe4FVV3SQiDwLrVXUB8GcRGQRkAYeAcb62h0TkHzjJBOBBVQ1tikFjTLkKZcWwAhNARhp8PsVZKrJFd+fuoFrWRewWqYzLEcbFxen69evLOwxjTB6dH1jE0fTsErdrWjuatZP7Bd656wv4+K9wcBucfxtc9gBEVQ8x0vAkIhtUNS5vuT1ZbIwJWbBXAYUuGP/9Klj+MOz+Auq2hBsWQNs+Icdq8rNEYIwJSSiLxgRMAj+shRUPw84VUKspDHwUuo2DKFs/u7RYIjDGBC2UJJBvPCB5AyybBjuWQs3G0H8axN0I0TVcitYUxBKBMabE4hOSmfrRJg6nZZa4bb6Hww7tgqUPwqYPoHoD6PcgnHczRNd0L2BTKEsExpgSCeYqwCPwz7zPBHizYc0LsOwhZ6ro3nfDhXdAtTouR2yKYonAGFMswS4ak29+IHAmintvHHz/X2h/OVz1BNRp7laopoQsERhjihTsbKHtmtTMnwR+SoQ5oyHtZxj8PMReb4vHlDNLBMaYAoWydGTAK4GN78KCO6BGI7hxETQ/15U4TWgsERhj8olPSObued+QkV3yFBDtER4b1iXPeIAXlj0I/30SzugJw9+wJ4MrEEsExphT5HQDnU4KIyOXEydbqSkn+VGbsMbbgY+yL+AIgReDH9OjFQ8N6XRqYcYvzvxA//vYeR7gisfBE1X634gpNksExphc8QnJvLNmF3/0fMSdke/jwUuStuWI1iQ2YjtXedZwb+TbvJN9CS9mXUUKznyRAbuBAPZ+A+/f7KweZovJV1iWCIwxuc8FpKal86+o5xnkWc3H2efzcOZofqKRr5bSUb7n5shPGOdZzBjP58z39GPkbVOhcftTD5h+HFY/Cysfh5qNYMwHcObFZf59meKxSeeMCXO/3hGkTIl8g3GRn/Fo5iheyB5UYJtWsp97qsVzpawCb6YzI+jp3SCmNvy8BbYvhYzjcM5QuPIJqNGg7L4hUyCbdM4Yk4//mgG3e+IZF/kZL2VdwQvZVxfarmXbDlx5y41w/AAkvAXffQRfvwGZaVDvDOg4xJkeokW3MvguTKgsERgThuITkpnwbiJeX4fAdZ6l3BX1Hh9kX8TDWdfjzAsa2ClzBNVqAr0mOF85vQs2BlDpWCIwJszknSJiQMRXPBT5Ksuzu3B35q1oIUuZF7hwDFgCqMQsERgTRvImgfPlO56Oeo5v9Ez+mPkXsgr4SMg3UZypUiwRGBMG4hOSmfheIv5ryJ8ju3gp+nF+0CbcmDGRE+Sf779mtIdpQzsVfBVgqgRLBMZUcYEWke8kO3kr+mGOUpMbMiaRSu187QrtBjJVSsGdgSUgIgNFZIuIbBeRSQH2TxCRzSKyUUSWisgZfvuyRSTR97XAjXiMMY6zJ3+SLwl0la38O/phjmpNRmX8H3tpeMr+GlERlgTCTMhXBCLiAZ4D+gF7gHUiskBVN/tVSwDiVDVNRG4DHgNG+vadUNXYUOMwxpyq8wOLOOk3V5CHbMZ5FnN35Bz2aQOuz5hMMqfO92MJIDy50TXUHdiuqjsBRGQOMBjITQSqutyv/hpgjAvva4zJIz4hmckfJvFLRjbgfPifJT/SO2Ijoz1LaRmRwpLsrkzM/MMp3UE1oiJ4+JrOlgTClBuJ4HTgR7/tPcD5hdS/CfjUb7uaiKwHsoDpqhofqJGI3ArcCtCqVatQ4jWmajlxGPZsYPPXK0lL2shTcoTG0UdoIodpQiqR4owQr/O2Z0rGDSz1dsX/OYGAE8WZsFKmg8UiMgaIA/r4FZ+hqski0hZYJiJJqrojb1tVnQXMAmeKiTIJ2JiK6vBu+N8nsOUT+H4VaDYdgcaeOvys9UjRumzX0/lJG7DT25zV3o7sJ/80D5YEDLiTCJKBln7bLXxlpxCRy4DJQB9VTc8pV9Vk3787RWQFcC6QLxEYE9ay0p0P/O2fw7Ylznw+AI07EF9zOHMPnckmb2uOUrwF3+25AOPPjUSwDmgnIm1wEsAo4Hr/CiJyLvAiMFBVD/iV1wfSVDVdRBoBPXEGko0xqT/C9iXOB//O/0DmL+CJdhZ26TYWzrqc0e/v58sfS7aQvF0FmLxCTgSqmiUitwOLAQ/wqqpuEpEHgfWqugCYAdQC3hPnMfQfVHUQ0AF4UUS8OLeyTs9zt5Ex4eXQLvj2fdgUD/uTnLK6raDLKGjXD9r0huiazoyh878r0aELXDPAhD2bhtqYiiBlKyz7hzOLJwotz4ezr4L2A6BR+1Pm8Tl/2hL2H8so0eEtCRiwaaiNqZgyT8J/psOqZyGqBvT6m7OcY72WAat3fmARR9OzS/QW7ZrUtCRgCmWJwJjycvh7ePcG2JsIsWOg31RnNa884hOSuef9jaRnefMfowg2HmCKwxKBMeVh62JnQXdVGPU2nH1lwGrxCcncOTexxIe3BGBKwhKBMWXJmw3LH4YvHofTOsGI2dCgbcCqwSSBCIEnRtg0EaZkLBEYU1Z++Rnm3Qi7/gPn/g6umAFR1QNWDTRjaFHqxHjYOHWgG5GaMGOJwJiysP1zmH8HnDgEg56Frr8LWC3YrqCmtaNZO7lfiEGacGWJwJjSlHYIFt8H37zj3AZ6/Rxo1iVg1WCTgN0aakJlicCY0rJ5Piz8mzMpXK+7oPdEiMq/ChgElwQiBbY/EniQ2ZiSsERgjNtOHIZPJkLSe85f/2M+gGadC6yedx3h4rC5goybLBEY46bDu+HNayD1e+h7H/SaAJ6oAqsHMyhsi8cYt1kiMMYtB3fAa5c7M4WO/RjOCNxvH5+QzIzFW0hOPVHit7AkYEqDJQJj3HDyCLw9ErIz4MZF0KRDwGrxCclMmJtISZ8Rtq4gU5osERjjhk8nwaGdMHZBgUkAKPGAsN0WasqCJQJjQrVjGXzztnNXUOuLAla5Pz6Jt9b8UKLD2lWAKSuWCIwJhdcLSx6Aeq2cRJBHMAkA7NkAU7YsERgTis0fwr6NMPRFiIw5ZVcwdwSBDQibsmeJwJhgeb3OBHJNzoFOw0/ZFcziMVERMGO4JQFT9iwRGBOs7Z/Dwe1w7SsQ4cktDiYJ2FWAKU+WCIwJ1tqZULsZdBwMBDceUM0j/G/aFaURnTHFZonAmGAc3AE7lsLF94MnyqaNNpVahBsHEZGBIrJFRLaLyKQA+2NEZK5v/1oRae23715f+RYRGeBGPMaUuqT3AIFzR9P5gUUlTgJjerSyJGAqjJCvCETEAzwH9AP2AOtEZIGqbvardhNwWFV/IyKjgEeBkSLSERgFnAM0Bz4XkfaqWrLVuY0pS6pOImh9Eec/s6lEi8nbEpKmInLjiqA7sF1Vd6pqBjAHGJynzmDgDd/recClIiK+8jmqmq6qu4DtvuMZU3Ht/QYObufl1K4lGhTueWYDSwKmQnIjEZwO/Oi3vcdXFrCOqmYBR4CGxWwLgIjcKiLrRWR9SkqKC2EbU3LxCcm8/MIMMtTDM/vOKXa7MT1a2QNipsKqNIPFqjoLmAUQFxen5RyOCUOjX1rNqh0/82XMKv7j7cIRahXZxp4NMJWBG4kgGWjpt93CVxaozh4RiQTqAgeL2daYcpfzbEB32UJzOcT07OuLbGPjAaaycKNraB3QTkTaiEg0zuDvgjx1FgBjfa+HActUVX3lo3x3FbUB2gFfuRCTMa6IT0imzaSFuWMBgz2rSNMYlni7FtrOkoCpTEK+IlDVLBG5HVgMeIBXVXWTiDwIrFfVBcArwJsish04hJMs8NV7F9gMZAF/sjuGTEWRdwnJKLK4wrOWJd5unCDw2sPRHuGxYV2sK8hUKq6MEajqJ8Anecr+7vf6JDA8bzvfvmnANDfiMMYtgaaJuCgiifpynAXZgQd9IwW22lPCphJy5YEyY6qSguYKGuRZRarWZKW3S759dWI8bH/kyrIIzxjXVZq7howpbYXNFVSNdPpHrGd+9oVk+v23sWkiTFVgicAY8o8H5HVZxNfUlHQ+8l6YW2ZJwFQVlghMWLs/Pol/r/0BLeLJlMGeVezXeqz1diACeMKmjTZViCUCE7aKO210fY7SNyKRV7MHcn2P1nZbqKlyLBGYsBSfkFzstQOu8qwhSrJpd9nN/KGvJQFT9VgiMGGlqLGAQK71fMGROmdxSd9LSikqY8qXJQITNjo/sKhEU0YDXNrwILG/7IDz/1FKURlT/uw5AlPlxSck03rSwhIngTE9WvFKh0TwxEDs6NIJzpgKwK4ITJUWzDrC4FtM/uya8MQ70Gk41GxYCtEZUzHYFYGpskJKAueeDl+/AZlpcP6tpRCdMRWHXRGYKimYxeR7ntng18VjTh6B/z4FbS+GZvmnlDCmKrFEYKqUYK8CTkkCAP99Ek4cgsumuBecMRWUJQJTJQSbACDA2gE/roMvn3YGiJvHuhOgMRWYJQJT6QXTDQQBrgIA9n0Lc0dD3dNh4CMuRWhMxWaJwFRqwTwbADl3BdWAQzsh/Tgc2wffzoNNH0KNRnD9u1CtbilEbEzFY4nAVFq/uXchWUVMFpdXzYgM5sYm8dsv7of5O0/dGV0buo6FXn+DOs3cC9SYCs4Sgal0gh0P+Mu5wl8PPQ6bv4XWvaDbOKjVFKJqQM1Gzt1B0TXdD9iYCs4SgalUghkPqBEVwb/616Hf2t9DdqbT7dN+QClFaEzlE1IiEJEGwFygNbAbGKGqh/PUiQVeAOoA2cA0VZ3r2/c60Ac44qs+TlUTQ4nJVE3xCcncOTexxO1ynxB+6WLwZsPvP4UmZ7sfoDGVWKhPFk8ClqpqO2CpbzuvNOAGVT0HGAg8JSL1/PZPVNVY31diiPGYKmj0S6tLnAQEXxLo0gw+HA+pP8Cof1sSMCaAULuGBgN9fa/fAFYA9/hXUNWtfq9/EpEDQGMgNcT3NmGgoIXkC9O0djRrJ/dzNr74J2z9FC5/DFr1KIUIjan8Qr0iaKqqe32v9wFNC6ssIt2BaGCHX/E0EdkoIk+KSEwhbW8VkfUisj4lJSXEsE1Fd398Eq0nLSxxEuh5ZoNfk8APa2DZNDjnGuhu8wUZUxDRIhZrFZHPgdMC7JoMvKGq9fzqHlbV+gUcpxnOFcNYVV3jV7YPJznMAnao6oNFBR0XF6fr168vqpqppIJZPAb8JosDSDsEL/aGCA/8YaU9E2AMICIbVDUub3mRXUOqelkhB90vIs1Uda/vQ/1AAfXqAAuByTlJwHfsnKuJdBF5DbirqHhM1RafkFziJFAjKoKHr+n8axLwemH+7XBsL9z0mSUBY4oQ6hjBAmAsMN337/y8FUQkGvgQmK2q8/Lsy0kiAgwBvg0xHlNJBXMVUCfGw8apA/Pv+Ox+2LIQBk6H07u5FKExVVeoYwTTgX4isg24zLeNiMSJyMu+OiOA3sA4EUn0fcX69v1bRJKAJKAR8FCI8ZhKqN8TK0qcBJrWjs6fBLxeWPoPWPMcdP8DnD/exSiNqbqKHCOoiGyMoPKLT0hmxuItJKeeKHHbfLOFZp6AH1bDiunw41roegNc9ZQzPmCMyRX0GIExbotPSObeD5I4kVmyyeK6yRaeOvNrWu7eCNN+BhSyM8Cb5VSo0RAGPw+x14OI+4EbU0VZIjBlKpgnhGPI4IHI2VwfuQx+rgtnXgJ1fAPDnihnfqAm5zjlUdXcD9qYKs4SgSkzwcwTFEMGHzd+nnbH1sGFd0Df+yC6RilFaEx4skRgykQw6wZc1LYeb9V6Braug8HPwrljSik6Y8JbqHcNGVOo+IRk2k5aWOIk8NTIWN7qsPbX6SEsCRhTauyKwJSaYNcNGNOjFUMa/AALHoJzhkL3W0ohOmNMDksExnXBThERExnBo9d2ZshZ1WHmRVCvFVz9tN0BZEwps0RgXBPsFQD4LSTv9cI7o+CXFLhpCVSr43KUxpi8LBEYVwQzXTSAR+CfI/wmi1v9DGxbDJfPgOax7gZpjAnIEoEJ2eiXVpc4CbRrUpMlE/qeWrjzP/D5FOg42MYFjClDdteQCcn98UklHg8Y06NV/iRwaCe8Nw4atYfBz9m4gDFlyK4ITFDiE5KZ+F4imd7it4mKgBnD/bqBcqT+AG8Mcl6P/DfE1HYvUGNMkSwRmBIJdhH5fBPF5diXBO9cD+lHYexH0Og3oQdpjCkRSwSm2FxZOSxHdhZ89SIse8hZOOaG+dCsi0uRGmNKwhKBKZZgxgIigCcCJYHvV8PCv8GBTfCbfs6YQO1Cl7s2xpQiSwSmSCWdLK7ABHDiMCz5O3w9G+q0gJFvwdlX2cCwMeXMEoEJLDuTdZ+8xpavFjNaI9gQ0Z5F3u5kFvErU+CA8NbFzjrCaQeh51+gzz3O9NHGmHJnicDk8+SchVy2+T7Oi9jNWRHVEWBc5Gfs8jZlQuYfSdB2AdsFfDZAFVY+DsunwWm/hTHvQ7POpf49GGOKzxKBOcWgB17hFabikWxuy/gLi7znAXBxRCIPRr3Oe9FTmZE1khezrwJ+7dLJnSLCX/pxiL8NvlsAnUfC1f+CqOpl+N0YY4ojpEQgIg2AuUBrYDcwQlUPB6iXjbNAPcAPqjrIV94GmAM0BDYAv1PVks9TYFxx3uT3+DDyYUAZnvEAO/TX7p1l3q6sSz+bR6Je5t6od+gUsYu7M2+ldu06rJ3cL//BDn8Pc66HA5uh/zS44E82FmBMBRXqFcEkYKmqTheRSb7tewLUO6GqsQHKHwWeVNU5IjITuAl4IcSYTAnEJyQz9aNNHE7L4Nmol2jK4XxJIMcxanB75h1s9Lbhnsg5dKm1j5bjP8h/0J0rYN6NzlrCo9+D31xW+t+IMSZooqrBNxbZAvRV1b0i0gxYoapnBah3XFVr5SkTIAU4TVWzROQCYIqqDijqfePi4nT9+vVBx20c/ncDjfQs59Gol5ieOYqZ2YMKbSfAWxen0TNxInizods4aN3LWUj+m3fgfx87U0WMesceEDOmAhGRDaoal7c81CuCpqq61/d6H1DQzeDVRGQ9kAVMV9V4nO6gVFXN8tXZA+T/M9SUCv+lI1vIAR6InM0X2b/19f0X7JQnhLuf59wOuvo5WPW0UxZTF/reCxf+2dYWNqaSKDIRiMjnwGkBdk3231BVFZGCLi/OUNVkEWkLLBORJOBISQIVkVuBWwFatWpVkqbGT/41A5SHIl/Di3B35h/QAuYhjIwQHh/e5dTbQuu3hhGz4fgBZ74gVeeOoMiYUv0ejDHuKjIRqGqBHbwisl9Emvl1DR0o4BjJvn93isgK4FzgfaCeiET6rgpaAMmFxDELmAVO11BRcVdJmSdh/Suw4XWnG6Zdf+ee/Lotimwan5DM5A+T+CXj1LWDB0Wspq/nG6Zk3sBeGgZsG/C2UH+1mjhfxphKKdRpqBcAY32vxwLz81YQkfoiEuN73QjoCWxWZ3BiOTCssPbGZ+9GePY8WHwf1GgETX8L61+FFy50BmcLEJ+QTIf/+5Q75ybmSwJ1Oc7/Rc0m0duW2dn987WN9ghPjYwtPAkYYyq9UMcIpgPvishNwPfACAARiQPGq+rNQAfgRRHx4iSe6aq62df+HmCOiDwEJACvhBhP1bQvCd64GqJrOZOzte3rlB/aCXNGw1vXwqi3of2v4+zxCcn87d1Esgu5dro38m3qc5wbMu/Fm+dvgoATxRljqqSQ7hoqL2F119DxAzDrYkDh959C/TNO3X/yqJMkUrbA2AXQsnuxZgntG5HI69GPMTPraqZnXXfKPksCxlRNpXXXkClNWekw93fO/Dw3LsqfBMBZ3H30PHi1P+lvjqDfsb/zgxY+k2ddjvNo1Cy2eFvwZNa1ueVFjgUYY6okW6qyolJ1pmr+cQ0Meb7whdxrNWbA/ttJS8/ktajHqMexAqsKXmZEvUgDjjEh849kEM1TI2PZPf1KSwLGhClLBBXV2pmQ8Cb0ngi/vSZglfiEZGKnfkbrSQvZkn0at2RMoIWk8HL0P6lFWsA2d0fOpb9nAw9nXc9WacOT1g1kTNizRFARbV3s3B109lXQ976AVXKWjEw9kZlbtl7P5s7MP9FFdvBW9MM05+fcfZFkMTnyLW6L/Ii3si7lw6irmZH3uQBjTFiyweKK5ruPYd7voUkHGPcJxJwyMwfxCcnMWLyF5NQTBR7i0ogNPB31LIowP7snx6jBgIivaBOxn8U1BzFgwmvgseEhY8KNDRZXdGmH4D+POl1Czbs68/bnSQLFXSlsqbcbAzIe467IuQz1/JdqZLDa25HXq9/I1ImTSus7MMZUUpYIysrh72H7EvhhDWT6/pqPjHFm6DySDHu/cV6fdwv0fwiiquU2Lc4zAXnt0cbcmXk7gpdqEV4eGR7HVOsGMsYEYImgNKUfg1XPwKYP4eetTlnt5lC9nvM6Kx0kAuo0g/P/AOeOcbqEfOITkrl73jdklCQD+Am4WIwxxuRhiaC0bFkEH/0Fju9zngTuNg5+0w8atSvWAi3FeSisIAUuHm+MMQFYInBbdqYzNfOa56FpJxj5FrQ8r9jN888OWjKnTBNtjDHFYInATenH4N2xsGMpdP8D9P9HsadkDrUbCCwJGGOCY4nALcdT4K1rYP8mGPQMdL2hWM2CGQjOy+YGMsaEwhKBG9IOwezBcHgXXD8X2gVYzD2PnAfCgmV//Rtj3GKJIFQZv8CbQ+Hgdhj97q9TRBcgPiGZie8lkukN/i17ntnAkoAxxjWWCEKhCvG3wb6NznoARSSBUO4EymFXAsYYt1kiCMWXT8Hm+dDvH3DW5YVWLe5TwYFEe4THhtm8QMaY0mGJIFj7N8OyadBxMFx4R77dOXMC/ZR6gupREaQF2RdkVwDGmNJmiSAY2Vkw/49QrS5c+US+B8TydgEFkwTsqWBjTFmxRBCMNc/DTwkw7DWo2Si3ONQ7gQCa1o5m7eSi7zoyxhi3hF8iyDwBUdWDb3/iMKx8HNr1h3OGunIXEFgXkDGm/ISUCESkATAXaA3sBkao6uE8dS4GnvQrOhsYparxIvI60Ac44ts3TlUTQ4mpUHNGQ/pRGPtR8MdY/RykH2HZ6eOZ8OCSUxaGCYYlAGNMeQt1hbJJwFJVbQcs9W2fQlWXq2qsqsYClwBpwGd+VSbm7C/VJABQv7UzDXRG4GUci/TLQVjzAkn1LuHGRSdDSgI1oz08NTLWkoAxptyF2jU0GOjre/0GsAK4p5D6w4BPVTXIT+IQnXkJrH4Wvl8F7S4refsvn8Kbkcadxwq/VbQwdgVgjKloQr0iaKqqe32v9wFNi6g/CngnT9k0EdkoIk+KSIEztInIrSKyXkTWp6SkBBftGReCJwZ2Li9Rs/iEZHpP/YC0L18kPvtCdmhw9/NbEjDGVERFXhGIyOfAaQF2TfbfUFUVkQKnThORZkAnYLFf8b04CSQamIVzNfFgoPaqOstXh7i4uOCmaIuqDq16wI6iE8H98Un8e+0P5CzpfLPnc2pEpfNS1pUlflu7FdQYU5EVmQhUtcA+FBHZLyLNVHWv74P+QCGHGgF8qKq5Het+VxPpIvIacFcx4w7emRfD51Pg2H6onf8CJj4hmckfJvFLRnZuWQRexno+Y633bL7TM4r9VlERMGO4zQxqjKnYQh0jWACMBab7/p1fSN3rcK4AcvklEQGGAN+GGE/R2l4MTIGdK6DLyNziwhaEuTTia1pGpDAtY3Sx3sK6gIwxlUmoiWA68K6I3AR8j/NXPyISB4xX1Zt9262BlsB/8rT/t4g0BgRIBMaHGE/RTusMNRrCzuXEey9ixuItJKeeKLTJOM9ikrUhS7zdCq1nCcAYUxmFlAhU9SBwaYDy9cDNftu7gXz9I6p6SSjvH5SICPbU705U4qfcufYqnBxUsPbyIz09m5ieOYpsPKfsE4HR59uHvzGmcgubJ4v9+/5HeFrwWFQq7SSZbdqi0HbjPIs4qVHMyb44t8z6/o0xVUlYJIL4hGT+OjeRnFuN/pvdCaKgV0QS27ILTgQNOcK1nv/yfvZFpFIbsO4fY0zVExaJYPKHSfjfb/oTjdjmPZ1+ERt4Nbvgh8N+F7mEGMnklewrLAEYY6qssEgE/reC5vg4uwd/ifyAJhzmAPXz7Y8hg995lvC/OheydMKtZRGmMcaUi1CfLK60Pvb2IEKUKz1r8u1r16QmW4al0lCOcfbQ+8ohOmOMKTthkQgC3Re0Q09ns/cMhni+BF/HUTWPsHv6lSy5s7czy2izLtD6ojKN1RhjylpYJILRPVoFLH87+xK6ROzkPNlCzzMb8L9pVzg7Nn8IB7fBBXfkW33MGGOqmrBIBA8N6cSYHq2I8PtMrx4VwflDbocaDXnvnFW/zgV08ggsus+5GjhnaPkEbIwxZSgsBovBSQYB7/rJ/Ct8dj98+S847xaY/yc4vh+uexs8YXN6jDFhzD7pevwRkr+GJX93lqBMPwoDHoHTC59OwhhjqgpLBBEeGPoiNOsMKVvh3NE2QGyMCSuWCAAio+Giv5Z3FMYYUy7CYrDYGGNMwSwRGGNMmLNEYIwxYc4SgTHGhDlLBMYYE+YsERhjTJizRGCMMWHOEoExxoQ5UdWia1UwIpICfB9k80bAzy6G4xaLq2QsrpKxuEqmosYFocV2hqo2zltYKRNBKERkvarGlXcceVlcJWNxlYzFVTIVNS4ondisa8gYY8KcJQJjjAlz4ZgIZpV3AAWwuErG4ioZi6tkKmpcUAqxhd0YgTHGmFOF4xWBMcYYP5YIjDEmzFXJRCAiw0Vkk4h4RaTA26xEZKCIbBGR7SIyya+8jYis9ZXPFZFol+JqICJLRGSb79/6AepcLCKJfl8nRWSIb9/rIrLLb19sWcXlq5ft994L/MrL83zFishq3897o4iM9Nvn6vkq6PfFb3+M7/vf7jsfrf323esr3yIiA0KJI4i4JojIZt/5WSoiZ/jtC/gzLaO4xolIit/73+y3b6zv575NRMaWcVxP+sW0VURS/faV5vl6VUQOiMi3BewXEXnaF/dGEenqty+086WqVe4L6ACcBawA4gqo4wF2AG2BaOAboKNv37vAKN/rmcBtLsX1GDDJ93oS8GgR9RsAh4Aavu3XgWGlcL6KFRdwvIDycjtfQHugne91c2AvUM/t81XY74tfnT8CM32vRwFzfa87+urHAG18x/GUYVwX+/0O3ZYTV2E/0zKKaxzwbIC2DYCdvn/r+17XL6u48tS/A3i1tM+X79i9ga7AtwXsvwL4FBCgB7DWrfNVJa8IVPU7Vd1SRLXuwHZV3amqGcAcYLCICHAJMM9X7w1giEuhDfYdr7jHHQZ8qqppLr1/QUoaV67yPl+qulVVt/le/wQcAPI9OemCgL8vhcQ7D7jUd34GA3NUNV1VdwHbfccrk7hUdbnf79AaoIVL7x1SXIUYACxR1UOqehhYAgwsp7iuA95x6b0Lpaorcf7wK8hgYLY61gD1RKQZLpyvKpkIiul04Ee/7T2+soZAqqpm5Sl3Q1NV3et7vQ9oWkT9UeT/JZzmuyx8UkRiyjiuaiKyXkTW5HRXUYHOl4h0x/krb4dfsVvnq6Dfl4B1fOfjCM75KU7b0ozL3004f1XmCPQzLcu4rvX9fOaJSMsSti3NuPB1obUBlvkVl9b5Ko6CYg/5fFXaxetF5HPgtAC7Jqvq/LKOJ0dhcflvqKqKSIH37voyfSdgsV/xvTgfiNE49xLfAzxYhnGdoarJItIWWCYiSTgfdkFz+Xy9CYxVVa+vOOjzVRWJyBggDujjV5zvZ6qqOwIfwXUfAe+oarqI/AHnauqSMnrv4hgFzFPVbL+y8jxfpabSJgJVvSzEQyQDLf22W/jKDuJcckX6/qrLKQ85LhHZLyLNVHWv74PrQCGHGgF8qKqZfsfO+es4XUReA+4qy7hUNdn3704RWQGcC7xPOZ8vEakDLMT5I2CN37GDPl8BFPT7EqjOHhGJBOri/D4Vp21pxoWIXIaTXPuoanpOeQE/Uzc+2IqMS1UP+m2+jDMmlNO2b562K1yIqVhx+RkF/Mm/oBTPV3EUFHvI5yucu4bWAe3EueMlGueHvkCd0ZflOP3zAGMBt64wFviOV5zj5uub9H0Y5vTLDwEC3l1QGnGJSP2crhURaQT0BDaX9/ny/ew+xOk7nZdnn5vnK+DvSyHxDgOW+c7PAmCUOHcVtQHaAV+FEEuJ4hKRc4EXgUGqesCvPODPtAzjaua3OQj4zvd6MdDfF199oD+nXhmXaly+2M7GGXhd7VdWmuerOBYAN/juHuoBHPH9sRP6+SqtEfDy/AKG4vSTpQP7gcW+8ubAJ371rgC24mT0yX7lbXH+o24H3gNiXIqrIbAU2AZ8DjTwlccBL/vVa42T5SPytF8GJOF8oL0F1CqruIALfe/9je/fmyrC+QLGAJlAot9XbGmcr0C/LzhdTYN8r6v5vv/tvvPR1q/tZF+7LcDlLv++FxXX577/BznnZ0FRP9MyiusRYJPv/ZcDZ/u1vdF3HrcDvy/LuHzbU4DpedqV9vl6B+eut0ycz6+bgPHAeN9+AZ7zxZ2E3x2RoZ4vm2LCGGPCXDh3DRljjMESgTHGhD1LBMYYE+YsERhjTJizRGCMMWHOEoExxoQ5SwTGGBPm/h9Aqwjqhnx/8QAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x_test, y_test, \"o\", label=\"Test\")\n",
    "plt.plot(np.sort(np.array(x_test).flatten()), np.array(y_pred)[np.argsort(np.array(x_test).flatten())], label=\"Prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "それっぽく学習はできていますが、うまくいっているとは言い難い結果となりました。これも QSVC の場合と同様で、使用している特徴量 $|\\psi({\\boldsymbol x})\\rangle$ がデータにあっていないことが問題であると考えられます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 用意されている量子回路\n",
    "\n",
    "scikit-qulacs では代表的な論文で発表されている機械学習用量子回路を手軽に使えるようにするため、量子回路の実装に努めています。機械学習用量子回路は `LearningCircuit` クラスのインスタンスとして実装されていて、`skqulacs.circuit` モジュールにある `create_...()` という関数を呼ぶことにより作成可能です。\n",
    "\n",
    "現在、\n",
    "- create_qcl_ansatz(n_qubits, c_depth, time_step, seed=None): [arXiv:1803.00745](https://arxiv.org/abs/1803.00745)\n",
    "- create_defqsv(n_qubits, tlotstep): [arXiv:1804.11326](https://arxiv.org/abs/1804.11326) \n",
    "\n",
    "が用意されています。\n",
    "\n",
    "基本的には `QNNClassifier` などの引数として与えることを推奨しますが、自前で新たなアルゴリズムを作りたいときなど、これらの量子回路を直接扱いたいときもあると思います。以下に使用例を掲載します。\n",
    "\n",
    "以下のコードで QCL ansatz を作成します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_qubits = 4\n",
    "c_depth = 4\n",
    "time_step = 1.\n",
    "ansatz = create_qcl_ansatz(n_qubits, c_depth, time_step)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`LearningCircuit` にセットされている訓練パラメータは `get_parameters()` によって取り出せます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48 [0.7238575654756965, 4.521772018945494, 5.300166829620294, 2.4396786706992875, 3.372497641445515, 0.0691143830945458, 2.4305919508432194, 0.897581496914585, 0.8153164989629146, 4.19580716083789, 4.614797622397918, 2.951713965321396, 2.449149087341643, 2.4619419636304105, 1.0029754525418129, 2.334478387370933, 2.5589036813723762, 4.50591651911791, 4.486222509952132, 1.559585289816079, 6.164351024607971, 1.47322926380012, 2.0729721326039914, 2.275646680431729, 2.9195023453638385, 2.7015553984398526, 5.814853292230643, 5.161654841481886, 0.7527848104233957, 1.728308187107492, 5.360006969176836, 5.201498343709625, 0.42675480228093243, 1.967788806417369, 1.7897854085117577, 5.321631318940725, 5.6122834079775785, 5.437876706508988, 2.4878547042811134, 3.796733572414534, 0.9677624343101473, 1.8208670050419042, 0.4657427370080585, 5.820313505901443, 1.2863802672251754, 2.4653914032427604, 0.3882421258541333, 1.4073421893586033]\n"
     ]
    }
   ],
   "source": [
    "parameters = ansatz.get_parameters()\n",
    "print(len(parameters), parameters)      # show parameters in the circuit. Parameters are chosen randomly within create_qcl_ansatz()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`update_parameters()` を使うと、パラメータを更新できます。以下では全てのパラメータをゼロにセットします。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "ansatz.update_parameters(np.zeros(len(parameters)))\n",
    "print(ansatz.get_parameters())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`run(x)` を使うと、入力データ ${\\boldsymbol x}$ に対して、初期状態 $|0\\rangle$ に量子回路を作用させたときの出力状態が `qulacs.QuantumState` として返されます。QCL ansatz は `n_qubits` 次元までの入力を扱うことのできる ansatz なので、今回は 2 次元入力を与えます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.30869612+0.13283004j -0.0759879 -0.06176279j -0.21316566-0.1438611j\n",
      "  0.21877642+0.06614673j -0.33638863+0.12504632j  0.24610584+0.23178805j\n",
      "  0.05948781+0.05711437j  0.03556247-0.08914448j  0.03556247-0.08914448j\n",
      "  0.05948781+0.05711437j  0.24610584+0.23178805j -0.33638863+0.12504632j\n",
      "  0.21877642+0.06614673j -0.21316566-0.1438611j  -0.0759879 -0.06176279j\n",
      "  0.30869612+0.13283004j]\n"
     ]
    }
   ],
   "source": [
    "state = ansatz.run([np.pi/2, np.pi/2])\n",
    "print(state.get_vector())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ユーザー定義の量子回路を学習に利用する\n",
    "ここでは自分でオリジナルの量子回路を定義し、それを学習に利用する方法を説明します。scikit-qulacs では、`LearningCircuit` クラスによって量子回路を表現しています。これは qulacs の `ParametricQuantumCircuit` のラッパーとなっていて、入力データと訓練される回路パラメータを一元管理し、それらをすべて qulacs の parametric gate で扱えるようにしたものです。\n",
    "\n",
    "`LearningCircuit` クラスは qulacs の `ParametricQuantumCircuit` のほぼ全ての `add_.._gate()` 系のメソッドを機能そのままにラップしています。それに加えて、`ParametricQuantumCircuit` を拡張する機能として、以下のメソッドが追加されています。\n",
    "\n",
    "- `add_input_RX_gate(index, input_func)`, `add_input_RY_gate(index, input_func)`, `add_input_RZ_gate(index, input_func)`: 入力データを入れるためのゲートを追加します。引数にはそれぞれ以下のものを与えます。\n",
    "    - `index`: そのゲートを作用させる量子ビット\n",
    "    - `input_func`: 入力データ ${\\boldsymbol x}$ -> 回転ゲートの回転角 $\\phi = \\phi({\\boldsymbol x})$ の変換を行う関数。回路実行時には `input_func(x)` が角度にセットされます。\n",
    "- `add_parametric_input_RX_gate(index, parameter, input_func)` (RY, RZ も同様) :入力データと訓練パラメータが同時に含まれているようなゲートを追加します。\n",
    "    - `index`: そのゲートを作用させる量子ビット\n",
    "    - `parameter`: 実数の訓練パラメータ $\\theta$\n",
    "    - `input_func`: 入力データ ${\\boldsymbol x}$, 訓練パラメータ $\\theta$ -> 回転ゲートの回転角 $\\phi = \\phi(\\theta, {\\boldsymbol x})$ の変換を行う関数。回路実行時には `input_func(theta, x)` が角度にセットされます。\n",
    "\n",
    "例えば以下のコードは、各量子ビットに ${\\boldsymbol x} = \\{x_i\\}_{i=0}^3$ の各成分を $R_y$ ゲートで入力したあと、各量子ビットを訓練可能な $R_y$ ゲートで変換し、最後に全ての量子ビットにアダマールゲートを一度だけ作用させる `LearningCircuit` を構成するコードです。(例のためだけに書いていて、特に意味は無い回路です。) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skqulacs.circuit import LearningCircuit\n",
    "n_qubit = 4\n",
    "circuit = LearningCircuit(n_qubit)\n",
    "for i in range(n_qubit):\n",
    "    circuit.add_input_RY_gate(i, lambda x: x[i%2])  # input 2 dimensional x into the circuit by RY rotation\n",
    "for i in range(n_qubit):\n",
    "    circuit.add_parametric_RY_gate(i, 0.)           # first argument is qubit index, second argument is parameter\n",
    "for i in range(n_qubit):\n",
    "    circuit.add_H_gate(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`run()` メソッドによって初期状態 $|0\\rangle$ にこの回路を作用させたときの量子状態が返されます。このメソッドは入力データ ${\\boldsymbol x}$ を引数として取ります。上の回路は 2 次元の ${\\boldsymbol x}$ を取れるように設計したので、2次元の入力を与えます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-6.93889390e-18+0.j -1.96261557e-17+0.j -2.08166817e-17+0.j\n",
      " -2.77555756e-17+0.j -2.08166817e-17+0.j  1.96261557e-17+0.j\n",
      " -6.93889390e-18+0.j  0.00000000e+00+0.j -2.08166817e-17+0.j\n",
      "  1.96261557e-17+0.j -6.93889390e-18+0.j  2.77555756e-17+0.j\n",
      " -6.93889390e-18+0.j  5.88784672e-17+0.j  9.02056208e-17+0.j\n",
      "  1.00000000e+00+0.j]\n"
     ]
    }
   ],
   "source": [
    "x = [np.pi/2,np.pi/2]\n",
    "state = circuit.run(x)\n",
    "print(state.get_vector())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "予想どおりの出力が得られることが確認できます。"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "9a254056ba7bb2d506825dd7a222ffa8b49c259e89497b09ec821585fc31e38d"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
