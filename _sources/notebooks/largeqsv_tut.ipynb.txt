{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "largeqsvを再現させます\n",
    "pythonのテスト"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "a=1\n",
    "print(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 720x216 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n",
    "# License: BSD 3 clause\n",
    "\n",
    "# Standard scientific Python imports\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Import datasets, classifiers and performance metrics\n",
    "from sklearn import datasets, svm, metrics\n",
    "from sklearn.model_selection import train_test_split\n",
    "digits = datasets.load_digits()\n",
    "\n",
    "_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))\n",
    "for ax, image, label in zip(axes, digits.images, digits.target):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation=\"nearest\")\n",
    "    ax.set_title(\"Training: %i\" % label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skqulacs.qsvm import QSVC\n",
    "from skqulacs.circuit import LearningCircuit\n",
    "from skqulacs.circuit import create_largeqsv\n",
    "\n",
    "\n",
    "n_qubit=8\n",
    "circuit = create_largeqsv(n_qubit,8,0.035)\n",
    "\n",
    "# flatten the images\n",
    "n_samples = len(digits.images)\n",
    "data = digits.images.reshape((n_samples, -1))\n",
    "\n",
    "# Create a classifier: a support vector classifier\n",
    "clf = QSVC(circuit)\n",
    "\n",
    "# Split data into 72% train and 38% test subsets\n",
    "#len=1797  1797*72%=1293 大体同じ\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    data, digits.target, test_size=0.72, shuffle=False\n",
    ")\n",
    "\n",
    "# Learn the digits on the train subset\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "# Predict the value of the digit on the test subset\n",
    "predicted = clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 720x216 with 7 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_, axes = plt.subplots(nrows=1, ncols=7, figsize=(10, 3))\n",
    "for ax, image, prediction in zip(axes, X_test, predicted):\n",
    "    ax.set_axis_off()\n",
    "    image = image.reshape(8, 8)\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation=\"nearest\")\n",
    "    ax.set_title(f\"Prediction: {prediction}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix:\n",
      "[[126   0   0   0   1   0   0   0   0   0]\n",
      " [  0 109   5   0   0   0   0   0  16   0]\n",
      " [  1   0 114   4   0   0   0   1   0   5]\n",
      " [  0   0   2 112   0   3   0   6   4   3]\n",
      " [  0   1   0   0 121   0   0   3   0   7]\n",
      " [  0   0   0   0   1 116   2   1   0  12]\n",
      " [  1   1   0   0   0   0 128   0   0   0]\n",
      " [  0   0   3   0   0   1   0 122   2   1]\n",
      " [  0   8   3   0   0   4   0   2 104   6]\n",
      " [  1  11   0   0   0   2   0   3   2 113]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "disp = metrics.ConfusionMatrixDisplay.from_predictions(y_test, predicted)\n",
    "disp.figure_.suptitle(\"Confusion Matrix\")\n",
    "print(f\"Confusion matrix:\\n{disp.confusion_matrix}\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1797\n"
     ]
    }
   ],
   "source": [
    "print(n_samples)"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "3aa62485c56a008029a4eac8c47fe30bbbdedfad132712774a5a0a3cf0c4801b"
  },
  "kernelspec": {
   "display_name": "Python 3.9.5 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
